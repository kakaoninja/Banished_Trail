[gd_scene load_steps=21 format=2]

[ext_resource path="res://Sprites/Actors/Player/BasePlayerSprite.png" type="Texture" id=1]
[ext_resource path="res://Scenes/Actors/Player/Player.gd" type="Script" id=2]
[ext_resource path="res://PostProcess/lensflareLess4.png" type="Texture" id=3]
[ext_resource path="res://PostProcess/roundLight40_40.png" type="Texture" id=4]
[ext_resource path="res://PostProcess/roundLight20_20.png" type="Texture" id=5]
[ext_resource path="res://Sprites/EffectResources/bayer16tile2.png" type="Texture" id=6]
[ext_resource path="res://Scenes/Maps/Background.gd" type="Script" id=7]
[ext_resource path="res://Sprites/world/scollingBackground.png" type="Texture" id=8]
[ext_resource path="res://Sprites/EffectResources/pixel-ink-1x.png" type="Texture" id=9]

[sub_resource type="Animation" id=5]
resource_name = "IdleLeft"
length = 0.6
loop = true
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerSprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.15, 0.25 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 13, 12, 11 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ReactorLightFlare:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.15, 0.25 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ Vector2( -0.5, 2.5 ), Vector2( -0.5, 1.5 ), Vector2( -0.5, 0.5 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("ReactorLightS:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.15, 0.25 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ Vector2( -0.5, 2.5 ), Vector2( -0.5, 1.5 ), Vector2( -0.5, 0.5 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("ReactorLightM:position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.15, 0.25 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ Vector2( -0.5, 2.5 ), Vector2( -0.5, 1.5 ), Vector2( -0.5, 0.5 ) ]
}

[sub_resource type="Animation" id=10]
resource_name = "IdleRight"
length = 0.6
loop = true
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerSprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.15, 0.25 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ReactorLightFlare:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.15, 0.25 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ Vector2( 0.5, 2.5 ), Vector2( 0.5, 1.5 ), Vector2( 0.5, 0.5 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("ReactorLightS:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.15, 0.25 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ Vector2( 0.5, 2.5 ), Vector2( 0.5, 1.5 ), Vector2( 0.5, 0.5 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("ReactorLightM:position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.15, 0.25 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ Vector2( 0.5, 2.5 ), Vector2( 0.5, 1.5 ), Vector2( 0.5, 0.5 ) ]
}

[sub_resource type="Animation" id=6]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerSprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 2 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ReactorLightFlare:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ Vector2( 0.5, 0.5 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("ReactorLightS:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0.5, 1.5 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("ReactorLightM:position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 1.5, 2.5 ) ]
}

[sub_resource type="Animation" id=9]
resource_name = "RunLeft"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerSprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 14, 15, 16, 17, 18, 19, 20, 21 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ReactorLightFlare:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ Vector2( -2.5, 1.5 ), Vector2( -1.5, 2.5 ), Vector2( -2.5, 0.5 ), Vector2( -2.5, -0.5 ), Vector2( -2.5, 1.5 ), Vector2( -1.5, 2.5 ), Vector2( -2.5, 0.5 ), Vector2( -2.5, -0.5 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("ReactorLightS:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ Vector2( -2.5, 1.5 ), Vector2( -1.5, 2.5 ), Vector2( -2.5, 0.5 ), Vector2( -2.5, -0.5 ), Vector2( -2.5, 1.5 ), Vector2( -1.5, 2.5 ), Vector2( -2.5, 0.5 ), Vector2( -2.5, -0.5 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("ReactorLightM:position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ Vector2( -2.5, 1.5 ), Vector2( -1.5, 2.5 ), Vector2( -2.5, 0.5 ), Vector2( -2.5, -0.5 ), Vector2( -2.5, 1.5 ), Vector2( -1.5, 2.5 ), Vector2( -2.5, 0.5 ), Vector2( -2.5, -0.5 ) ]
}

[sub_resource type="Animation" id=8]
resource_name = "RunRight"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerSprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 3, 4, 5, 6, 7, 8, 9, 10 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ReactorLightFlare:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ Vector2( 2.5, 1.5 ), Vector2( 1.5, 2.5 ), Vector2( 2.5, 0.5 ), Vector2( 2.5, -0.5 ), Vector2( 2.5, 1.5 ), Vector2( 2.5, 2.5 ), Vector2( 2.5, 0.5 ), Vector2( 2.5, -0.5 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("ReactorLightS:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ Vector2( 2.5, 1.5 ), Vector2( 1.5, 2.5 ), Vector2( 2.5, 0.5 ), Vector2( 2.5, -0.5 ), Vector2( 2.5, 1.5 ), Vector2( 2.5, 2.5 ), Vector2( 2.5, 0.5 ), Vector2( 2.5, -0.5 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("ReactorLightM:position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ Vector2( 2.5, 1.5 ), Vector2( 1.5, 2.5 ), Vector2( 2.5, 0.5 ), Vector2( 2.5, -0.5 ), Vector2( 2.5, 1.5 ), Vector2( 2.5, 2.5 ), Vector2( 2.5, 0.5 ), Vector2( 2.5, -0.5 ) ]
}

[sub_resource type="CircleShape2D" id=2]
radius = 50.0

[sub_resource type="CapsuleShape2D" id=11]
radius = 3.0
height = 14.0

[sub_resource type="CircleShape2D" id=12]
radius = 8.0

[sub_resource type="CircleShape2D" id=13]
radius = 7.0

[sub_resource type="Shader" id=14]
code = "shader_type canvas_item;
render_mode unshaded;

uniform sampler2D dither_texture;

uniform vec2 player_position;

uniform float circle_radius		: hint_range (0.1, 0.6);
uniform int screen_height;
uniform int screen_width;
uniform float dither_size : hint_range (0.0, 0.5);

uniform float tiling_scale = 1.0;




uniform sampler2D u_dither_tex;
uniform sampler2D u_color_tex;

uniform int u_bit_depth;
uniform float u_contrast;
uniform float u_offset;
uniform int u_dither_size;


float circle(vec2 position, float radius, float feather)
{
	return smoothstep(radius, radius + feather, length(position - player_position));
}


void fragment(){
	vec4 color = texture (TEXTURE, UV);

	vec2 uv = FRAGCOORD.xy;
	vec2 tiling_uv = uv / (float(screen_width) / 32.0 * -1.0);
	vec4 dither_result = texture(dither_texture, tiling_uv);
	
	float inner = 1.0 - circle(vec2(UV.x, UV.y), circle_radius, 0.05);
	
	COLOR = color;
	COLOR.a -= inner;
	
	
	// sample the screen texture at the desired output resolution (according to u_dither_size)
	// this will effectively pixelate the resulting output
	vec2 screen_size = vec2(textureSize(TEXTURE, 0)) / float(u_dither_size);
	vec2 screen_sample_uv = floor(UV * screen_size) / screen_size;
	vec3 screen_col = texture(TEXTURE, screen_sample_uv).rgb;
	
	// calculate pixel luminosity (https://stackoverflow.com/questions/596216/formula-to-determine-brightness-of-rgb-color)
	float lum = (screen_col.r * 0.299) + (screen_col.g * 0.587) + (screen_col.b * 0.114);
	
	// adjust with contrast and offset parameters
	float contrast = u_contrast;
	lum = (lum - 0.5 + u_offset) * contrast + 0.5;
	lum = clamp(lum, 0.0, 1.0);
	
	// reduce luminosity bit depth to give a more banded visual if desired	
	float bits = float(u_bit_depth);
	lum = floor(lum * bits) / bits;
	
	// to support multicolour palettes, we want to dither between the two colours on the palette
	// which are adjacent to the current pixel luminosity.
	// to do this, we need to determine which 'band' lum falls into, calculate the upper and lower
	// bound of that band, then later we will use the dither texture to pick either the upper or 
	// lower colour.
	
	// get the palette texture size mapped so it is 1px high (so the x value however many colour bands there are)
	ivec2 col_size = textureSize(u_color_tex, 0);
	col_size /= col_size.y;
	
	float col_x = float(col_size.x) - 1.0; // colour boundaries is 1 less than the number of colour bands
	float col_texel_size = 1.0 / col_x; // the size of one colour boundary
	
	lum = max(lum - 0.00001, 0.0); // makes sure our floor calculation below behaves when lum == 1.0
	float lum_lower = floor(lum * col_x) * col_texel_size;
	float lum_upper = (floor(lum * col_x) + 1.0) * col_texel_size;
	float lum_scaled = lum * col_x - floor(lum * col_x); // calculates where lum lies between the upper and lower bound
	
	// map the dither texture onto the screen. there are better ways of doing this that makes the dither pattern 'stick'
	// with objects in the 3D world, instead of being mapped onto the screen. see lucas pope's details posts on how he 
	// achieved this in Obra Dinn: https://forums.tigsource.com/index.php?topic=40832.msg1363742#msg1363742
	ivec2 noise_size = textureSize(u_dither_tex, 0);
	vec2 inv_noise_size = vec2(1.0 / float(noise_size.x), 1.0 / float(noise_size.y));
	vec2 noise_uv = UV * inv_noise_size * vec2(float(screen_size.x), float(screen_size.y));
	float threshold = texture(u_dither_tex, noise_uv).r;
	
	// adjust the dither slightly so min and max aren't quite at 0.0 and 1.0
	// otherwise we wouldn't get fullly dark and fully light dither patterns at lum 0.0 and 1.0
	threshold = threshold * 0.99 + 0.005;
	
	// the lower lum_scaled is, the fewer pixels will be below the dither threshold, and thus will use the lower bound colour,
	// and vice-versa
	float ramp_val = lum_scaled < threshold ? 0.0f : 1.0f;
	// sample at the lower bound colour if ramp_val is 0.0, upper bound colour if 1.0
	float col_sample = mix(lum_lower, lum_upper, ramp_val);
	vec3 final_col = texture(u_color_tex, vec2(col_sample, 0.5)).rgb;
	
	// return the final colour!
	COLOR.rgb = final_col;
	
}
/* 
This shader is under MIT license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/"

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 14 )
shader_param/player_position = Vector2( 0.5, 0.5 )
shader_param/circle_radius = 0.1
shader_param/screen_height = 480
shader_param/screen_width = 270
shader_param/dither_size = 0.5
shader_param/tiling_scale = 5.0
shader_param/u_bit_depth = 3
shader_param/u_contrast = 0.47
shader_param/u_offset = 0.0
shader_param/u_dither_size = 1
shader_param/u_dither_tex = ExtResource( 6 )
shader_param/u_color_tex = ExtResource( 9 )

[node name="Player" type="KinematicBody2D"]
position = Vector2( 0, -7 )
z_index = 1
collision_mask = 2
script = ExtResource( 2 )
__meta__ = {
"_edit_group_": true
}

[node name="Camera2D" type="Camera2D" parent="."]
current = true

[node name="PlayerSprite" type="Sprite" parent="."]
texture = ExtResource( 1 )
hframes = 11
vframes = 2
frame = 2

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/IdleLeft = SubResource( 5 )
anims/IdleRight = SubResource( 10 )
anims/RESET = SubResource( 6 )
anims/RunLeft = SubResource( 9 )
anims/RunRight = SubResource( 8 )

[node name="KnockbackArea" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 8
monitoring = false

[node name="Knockback" type="CollisionShape2D" parent="KnockbackArea"]
shape = SubResource( 2 )

[node name="KnockbackTimer" type="Timer" parent="KnockbackArea"]

[node name="HitBox" type="Area2D" parent="."]
collision_mask = 20

[node name="CollisionShape2D" type="CollisionShape2D" parent="HitBox"]
shape = SubResource( 11 )

[node name="ReactorLightFlare" type="Light2D" parent="."]
position = Vector2( 0.5, 0.5 )
rotation = -0.523599
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 3 )
color = Color( 0.14902, 0.921569, 0.980392, 1 )
energy = 1.1

[node name="ReactorLightM" type="Light2D" parent="."]
visible = false
position = Vector2( 1.5, 2.5 )
texture = ExtResource( 4 )
color = Color( 0.14902, 0.921569, 0.980392, 0 )
energy = 0.6

[node name="ReactorLightS" type="Light2D" parent="."]
position = Vector2( 0.5, 1.5 )
scale = Vector2( 0.325, 0.325 )
texture = ExtResource( 5 )
color = Color( 0.14902, 0.921569, 0.980392, 1 )
energy = 0.1

[node name="WallDetection" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 128

[node name="EnvironmentColliderDetect" type="CollisionShape2D" parent="WallDetection"]
position = Vector2( 0, 7 )
shape = SubResource( 12 )
one_way_collision_margin = 0.0

[node name="EnvironmentColliderPlayer" type="CollisionShape2D" parent="."]
position = Vector2( 0, 7 )
shape = SubResource( 13 )
one_way_collision_margin = 0.0

[node name="Sprite" type="Sprite" parent="."]
visible = false
material = SubResource( 15 )
texture = ExtResource( 8 )
script = ExtResource( 7 )

[connection signal="body_entered" from="KnockbackArea" to="." method="_on_KnockbackArea_body_entered"]
[connection signal="body_entered" from="WallDetection" to="." method="_on_WallDetection_body_entered"]
